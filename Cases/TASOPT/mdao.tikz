
%%% Preamble Requirements %%%
% \usepackage{geometry}
% \usepackage{amsfonts}
% \usepackage{amsmath}
% \usepackage{amssymb}
% \usepackage{tikz}

% Optional packages such as sfmath set through python interface
% \usepackage{sfmath}

% \usetikzlibrary{arrows,chains,positioning,scopes,shapes.geometric,shapes.misc,shadows}

%%% End Preamble Requirements %%%

\input{"/opt/homebrew/Caskroom/miniforge/base/envs/mdao/lib/python3.9/site-packages/pyxdsm/diagram_styles"}
\begin{tikzpicture}

\matrix[MatrixSetup]{
%Row 0
&
\node [DataIO] (output_Optimizer) {$x^o$};&
&
&
&
&
&
\\
%Row 1
\node [DataIO] (left_output_Optimizer) {$x^*$};&
\node [Optimization] (Optimizer) {$\text{Optimizer}$};&
&
\node [DataInter] (Optimizer-Fluid) {$x^o, x_a$};&
\node [DataInter] (Optimizer-Solid) {$x^o, x_s$};&
\node [DataInter] (Optimizer-Prop) {$x^o, x_p$};&
\node [DataInter] (Optimizer-Func) {$x$};&
\\
%Row 2
&
&
\node [MDA] (MDA) {$\text{MDA}$};&
\node [DataInter] (MDA-Fluid) {$y_s,y_p$};&
\node [DataInter] (MDA-Solid) {$y_p$};&
&
&
\\
%Row 3
\node [DataIO] (left_output_Fluid) {$y_a^*$};&
&
\node [DataInter] (Fluid-MDA) {$y_a$};&
\node [FLUID] (Fluid) {$\text{Aerodynamics}$};&
\node [DataInter] (Fluid-Solid) {$y_a$};&
\node [DataInter] (Fluid-Prop) {$y_a$};&
\node [DataInter] (Fluid-Func) {$y_a^*$};&
\\
%Row 4
\node [DataIO] (left_output_Solid) {$y_s^*$};&
&
\node [DataInter] (Solid-MDA) {$y_s$};&
&
\node [SOLID] (Solid) {$\text{Structure}$};&
\node [DataInter] (Solid-Prop) {$y_s$};&
\node [DataInter] (Solid-Func) {$y_s^*$};&
\\
%Row 5
\node [DataIO] (left_output_Prop) {$y_p^*$};&
&
\node [DataInter] (Prop-MDA) {$y_p$};&
&
&
\node [PROPULSION] (Prop) {$\text{Propulsion}$};&
\node [DataInter] (Prop-Func) {$y_p^*$};&
\\
%Row 6
&
\node [DataInter] (Func-Optimizer) {$f,g, \nabla f, \nabla g$};&
&
&
&
&
\node [FluidFunction,stack] (Func) {$\text{Functions}$};&
\\
%Row 7
&
&
&
&
&
&
&
\\
};

% XDSM process chains
{ [start chain=process]
 \begin{pgfonlayer}{process} 
\chainin (Optimizer);
\chainin (MDA) [join=by ProcessHV];
\chainin (Fluid) [join=by ProcessHV];
\chainin (Solid) [join=by ProcessHV];
\chainin (Prop) [join=by ProcessHV];
\chainin (MDA) [join=by ProcessHV];
\end{pgfonlayer}
}{ [start chain=process]
 \begin{pgfonlayer}{process} 
\chainin (Optimizer);
\chainin (MDA) [join=by ProcessHV];
\chainin (Func) [join=by ProcessHV];
\chainin (Optimizer) [join=by ProcessHV];
\end{pgfonlayer}
}

\begin{pgfonlayer}{data}
\path
% Horizontal edges
(Optimizer) edge [DataLine] (Optimizer-Fluid)
(Optimizer) edge [DataLine] (Optimizer-Solid)
(Optimizer) edge [DataLine] (Optimizer-Prop)
(Optimizer) edge [DataLine] (Optimizer-Func)
(MDA) edge [DataLine] (MDA-Fluid)
(MDA) edge [DataLine] (MDA-Solid)
(Fluid) edge [DataLine] (Fluid-Solid)
(Fluid) edge [DataLine] (Fluid-Prop)
(Solid) edge [DataLine] (Solid-Prop)
(Fluid) edge [DataLine] (Fluid-MDA)
(Solid) edge [DataLine] (Solid-MDA)
(Prop) edge [DataLine] (Prop-MDA)
(Fluid) edge [DataLine] (Fluid-Func)
(Solid) edge [DataLine] (Solid-Func)
(Prop) edge [DataLine] (Prop-Func)
(Func) edge [DataLine] (Func-Optimizer)
(Fluid) edge [DataLine] (left_output_Fluid)
(Solid) edge [DataLine] (left_output_Solid)
(Prop) edge [DataLine] (left_output_Prop)
(Optimizer) edge [DataLine] (left_output_Optimizer)
% Vertical edges
(Optimizer-Fluid) edge [DataLine] (Fluid)
(Optimizer-Solid) edge [DataLine] (Solid)
(Optimizer-Prop) edge [DataLine] (Prop)
(Optimizer-Func) edge [DataLine] (Func)
(MDA-Fluid) edge [DataLine] (Fluid)
(MDA-Solid) edge [DataLine] (Solid)
(Fluid-Solid) edge [DataLine] (Solid)
(Fluid-Prop) edge [DataLine] (Prop)
(Solid-Prop) edge [DataLine] (Prop)
(Fluid-MDA) edge [DataLine] (MDA)
(Solid-MDA) edge [DataLine] (MDA)
(Prop-MDA) edge [DataLine] (MDA)
(Fluid-Func) edge [DataLine] (Func)
(Solid-Func) edge [DataLine] (Func)
(Prop-Func) edge [DataLine] (Func)
(Func-Optimizer) edge [DataLine] (Optimizer)
(Optimizer) edge [DataLine] (output_Optimizer);
\end{pgfonlayer}

\end{tikzpicture}
